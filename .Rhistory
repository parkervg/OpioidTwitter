distn.morning.price + geom_bar(aes(fill = source))
table(.indexhour(cab.ts.dataset))
distn.morning.price + geom_density()
distn.morning.price <- ggplot(cab.ts.dataset, aes(.indexminute(cab.ts.dataset)))
distn.morning.price + geom_density()
distn.morning.price <- ggplot(cab.ts.dataset, aes(.indexhour(cab.ts.dataset)))
distn.morning.price <- ggplot(cab.ts.dataset, aes(.indexhour(cab.ts.dataset)))
distn.morning.price + geom_density(col = 'black')
install.packages("tmap")
table(.indexhour(cab.ts.dataset))
cab.hours <- .indexhour(cab.ts.dataset)
hour.density <- ggplot(cab.hours, aes(cab.hours))
morning.dataset$hours <- .indexhour(cab.ts.dataset)
morning.dataset$hours <- .indexhour(morning.dataset)
hour.density <- ggplot(morning.dataset, aes(hours))
hour.density + geom_density()
hour.density + geom_bar()
cab.ts.dataset$hours <- .indexhour(cab.ts.dataset)
View(cab.ts.dataset)
cab.ts.dataset <- xts(cab.dataset[,-1], order.by = as.POSIXct(time_stamp/1000, origin = "1970-01-01"))
#--------------
price.neighborhood.plot <- ggplot(cab.dataset, aes(source,price))
price.neighborhood.plot + geom_boxplot(aes(fill = factor(name))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box Plot of Uber-Lyft Service Price",
subtitle="Price Grouped by Service",
caption="Source: kaggle.com/ravi72munde/uber-lyft-cab-prices",
x="Service",
y="Price (USD)")
price.neighborhood.plot + geom_boxplot() +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box Plot of Uber-Lyft Service Price",
subtitle="Price Grouped by Service",
caption="Source: kaggle.com/ravi72munde/uber-lyft-cab-prices",
x="Service",
y="Price (USD)")
price.neighborhood.plot + geom_boxplot() +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box Plot of Uber-Lyft Service Price and Source",
subtitle="Price Grouped by Source",
caption="Source: kaggle.com/ravi72munde/uber-lyft-cab-prices",
x="Source/Neighborhood",
y="Price (USD)")
#boxplot of price grouped by cabtype, to see if the app used impacts how much the ride will cost
cab.type.bplot <- ggplot(cab.dataset, aes(cab_type,price))
cab.type.bplot + geom_boxplot(aes(fill=factor(cab_type))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box Plot of Uber-Lyft Price Parity",
subtitle="Price Grouped by Cab Type",
caption="Source: kaggle.com/ravi72munde/uber-lyft-cab-prices",
x="Cab_Type",
y="Price (USD)")
install.packages("ExPanDaR")
library(ExPanDaR)
ExPanD(df = cab.ts.dataset, cs_id = price, ts_id = Index)
ExPanD(cab.ts.dataset, cs_id = price, ts_id = Index)
ExPanD(cab.ts.dataset, cs_id = price, ts_id = Index)
ExPanD(cab.dataset, cs_id = price, ts_id = Index)
ExPanD(cab.dataset, cs_id = price, ts_id = time_stamp)
cab.dataset.luxury <- cab.dataset[which(cab.dataset$name %in% luxury),]
table(cab.dataset.luxury$source)
luxury.source.plot <- ggplot(cab.dataset, aes(source))
luxury.source.plot + geom_bar(aes(fill = name), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
luxury.price.bysource.plot <- ggplot(cab.dataset.luxury, aes(source,price))
luxury.price.bysource.plot + geom_boxplot()
luxury.price.bysource.plot + geom_boxplot() + theme(axis.text.x = element_text(angle=65, vjust=0.6))
#--------------
price.neighborhood.plot <- ggplot(cab.dataset, aes(source,price))
price.neighborhood.plot + geom_boxplot() +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box Plot of Uber-Lyft Service Price and Source",
subtitle="Price Grouped by Source",
caption="Source: kaggle.com/ravi72munde/uber-lyft-cab-prices",
x="Source/Neighborhood",
y="Price (USD)")
reduced.model <- lm(price ~distance + surge_multiplier + source + destination + name + distance*source + distance*destination + distance*name)
summary(reduced.model)
summary(final.model)
Family.Income.and.Expenditure <- read.csv("~/Dropbox/linear_reg_proj/input_data/Family Income and Expenditure.csv")
View(Family.Income.and.Expenditure)
income.data <- Family.Income.and.Expenditure
ggcorrplot(income.data,hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
library(ggplot2)
ggcorrplot(income.data,hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
install.packages("ggcorrplot")
library(ggplot2)
library(ggcorrplot)
income.data <- Family.Income.and.Expenditure
ggcorrplot(income.data,hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
library(dplyr)
income.data.num <- dplyr::select_if(Family.Income.and.Expenditure, is.numeric)
ggcorrplot(income.data.num,hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
View(income.data.num)
ggcorrplot(income.data.num,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
Bodyfat <- read.csv("~/Downloads/Bodyfat.csv")
View(Bodyfat)
ggcorrplot(Bodyfat,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
ggcorrplot(Bodyfat, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
qqplot(age, Bodyfat)
View(Bodyfat)
qqplot(age, bodyfat)
attach(Bodyfat)
qqplot(age, bodyfat)
qqplot(Age, bodyfat)
pairs(Bodyfat)
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
corr <- round(cor(Bodyfat), 1)
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of BodyFat",
ggtheme=theme_bw)
#--------------
null.lm <- lm(price~1)
categorical.model <- lm(price~source + destination + name)
anova(null.lm,categorical.model)
anova(asparallel.model,nonparallel.model)
asparallel.model <- ~ distance + destination + source + surge_multiplier + name
nonparallel.model <- ~ distance + surge_multiplier + source + destination + name + distance*source + distance*destination + distance*name + surge_multiplier*source + surge_multiplier*destination + surge_multiplier*name
anova(asparallel.model,nonparallel.model)
asparallel.model <- lm(price~ distance + destination + source + surge_multiplier + name)
nonparallel.model <- lm(price~ distance + surge_multiplier + source + destination + name + distance*source + distance*destination + distance*name + surge_multiplier*source + surge_multiplier*destination + surge_multiplier*name)
anova(asparallel.model,nonparallel.model)
step(m0, nonparallel.model, k = log(length(cab.dataset)) direction="both")
step(m0, nonparallel.model, k = log(length(cab.dataset)), direction="both")
scope.model <- ~ distance + surge_multiplier + source + destination + name + distance*source + distance*destination + distance*name + surge_multiplier*source + surge_multiplier*destination + surge_multiplier*name
m0 <- lm(price ~ 1, cab.dataset)
step(m0, scope.model, k = log(length(cab.dataset)), direction="both")
weather <- read.csv("~/Dropbox/linear_reg_proj/input_data/uber-lyft-cab-prices/weather.csv")
View(weather)
weather.xts <- xts(weather[,-1], order.by = as.POSIXct(time_stamp/1000, origin = "1970-01-01"))
weather.xts <- xts(weather, order.by = as.POSIXct(time_stamp/1000, origin = "1970-01-01"))
weather.dataset <- xts(weather, order.by = as.POSIXct(time_stamp/1000, origin = "1970-01-01"))
weather.dataset <- axis.Date(1, as.POSIXct(weather$time_stamp/1000, origin = "1970-10-01"))
simple.model <- lm(price~distance)
plot(simple.model, which = 2)
simple.model <- lm(price~distance)
simple.model <- lm(price~distance)
simple.model <- lm(price~log(distance))
plot(simple.model, which = 2)
#tableplot just to see what our data looks like initially
tableplot(cab.dataset, select = c(price, distance, destination, source, surge_multiplier, name))
simple.model <- lm(price~distance)
plot(simple.model, which = 2)
#boxplot of price grouped by cabtype, to see if the app used impacts how much the ride will cost
cab.type.bplot <- ggplot(cab.dataset, aes(cab_type,price))
cab.type.bplot + geom_boxplot(aes(fill=factor(cab_type))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box Plot of Uber-Lyft Price Parity",
subtitle="Price Grouped by Cab Type",
caption="Source: kaggle.com/ravi72munde/uber-lyft-cab-prices",
x="Cab_Type",
y="Price (USD)")
#boxplot to see if service is indicative of the price you will pay
service.type.bplot <- ggplot(cab.dataset, aes(name,price))
service.type.bplot + geom_boxplot(aes(fill=factor(name))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box Plot of Uber-Lyft Service Price",
subtitle="Price Grouped by Service",
caption="Source: kaggle.com/ravi72munde/uber-lyft-cab-prices",
x="Service",
y="Price (USD)")
library(alr4)
attach()
library(alr4)
attach(cakes)
library(alr4)
attach(cakes)
cake.lm <- lm(Y ~ X1 + X2 + I(X1^2) + I(X2^2) + X1*X2)
library(alr4)
cake.lm <- with(cakes, lm(Y ~ X1 + X2 + I(X1^2) + I(X2^2) + X1*X2))
library(alr4)
cake.lm <- with(cakes, lm(Y ~ X1 + X2 + I(X1^2) + I(X2^2) + X1*X2))
summary(cake.lm)
library(alr4)
cake.lm <- with(cakes, lm(Y ~ X1 + X2 + I(X1^2) + I(X2^2) + X1:X2))
summary(cake.lm)
library(alr4)
cake.lm <- with(cakes, lm(Y ~ X1 + X2 + I(X1^2) + I(X2^2) + X1:X2))
summary(cake.lm)
with(BGSall, plot(HT18,HT9))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(fill = sex))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(fill = Sex))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(fill = factor(Sex)))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex)))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex), labels = c("Males","Females")))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + labs(aes(col = factor(Sex), labels = c("Males","Females")))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point + labs(aes(col = factor(Sex), labels = c("Males","Females")))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point() + labs(aes(col = factor(Sex), labels = c("Males","Females")))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex)) + labs(aes(col = factor(Sex), labels = c("Males","Females")))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex)) + labs(labels = c("Males","Females")))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex)))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))) + labs(col = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))) + scale_fill_discrete(name = "Dose", labels = c("A", "B"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))) + scale_color_discrete(col = sex, labels = c("males","females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))) + scale_color_discrete(Sex, labels = c("males","females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))) + scale_color_discrete(name = "Sex", labels = c("males","females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))) + geom_smooth(method = "lm", se = T) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))) + geom_smooth(method = "lm", se = F) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
ht18.lm.p <- with(BGSall, lm(HT18~HT8 + Sex))
ht18.lm.p <- with(BGSall, lm(HT18~HT9 + Sex))
ht18.lm.np <- with(BGSall, lm(HT18~HT9 + Sex + Sex:HT8))
ht18.lm.p <- with(BGSall, lm(HT18~HT9 + Sex))
ht18.lm.np <- with(BGSall, lm(HT18~HT9 + Sex + Sex:HT9))
ht18.lm.p <- with(BGSall, lm(HT18~HT9 + Sex))
ht18.lm.np <- with(BGSall, lm(HT18~HT9 + Sex + Sex:HT9))
anova(ht18.lm.p,ht18.lm.np)
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))) + geom_smooth(method = "lm", se = F) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))) + geom_smooth(method = "lm", se = F) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(shapes = factor(Sex))) + geom_smooth(method = "lm", se = F) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(shape = factor(Sex))) + geom_smooth(method = "lm", se = F) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))) + geom_smooth(method = "lm", se = F) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
summary(ht18.lm.p)
BGSall$Sex <- factor(BGSall$Sex)
ht18.lm.p <- with(BGSall, lm(HT18~HT9 + factor(Sex)))
ht18.lm.np <- with(BGSall, lm(HT18~HT9 + Sex + Sex:HT9))
anova(ht18.lm.p,ht18.lm.np)
str(BGSall)
BGSall$Sex <- factor(BGSall$Sex)
ht18.lm.p <- with(BGSall, lm(HT18~HT9 + Sex))
ht18.lm.np <- with(BGSall, lm(HT18~HT9 + Sex + Sex:HT9))
anova(ht18.lm.p,ht18.lm.np)
summary(ht18.lm.p)
summary(ht18.lm.p)
library(faraway)
infmort.full.lm <- with(infmort, lm(log(mortality)~log(income) + region + region*log(income)))
infmort.reduced.lm <- with(infmort, lm(log(mortality)~log(income)))
anova(infmort.reduced.lm,infmort.full.lm)
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point(aes(col = factor(Sex))) + geom_smooth(method = "lm", se = F, fill = NA) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9), col = factor(Sex)) + geom_point() geom_smooth(method = "lm", se = F, fill = NA) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9), col = factor(Sex)) + geom_point() + geom_smooth(method = "lm", se = F, fill = NA) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9)) + geom_point() + geom_smooth(method = "lm", se = F, fill = NA) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9,Sex)) + geom_point() + geom_smooth(method = "lm", se = F, fill = NA) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9, group = Sex)) + geom_point() + geom_smooth(method = "lm", se = F, fill = NA) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9, group = Sex)) + geom_point(col = Sex) + geom_smooth(method = "lm", se = F, fill = NA) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9, group = Sex)) + geom_point(aes(col = Sex)) + geom_smooth(method = "lm", se = F, fill = NA) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
infmort.full.lm <- with(infmort, lm(log(mortality)~log(income) + region + region*log(income)))
anova(infmort.full.lm)
library(faraway)
infmort.reduced.lm <- with(infmort, lm(log(mortality)~log(income)))
anova(infmort.reduced.lm,infmort.full.lm)
infmort.full.lm <- with(infmort, lm(log(mortality)~log(income) + region + region*log(income)))
summary(infmort.full.lm)
confint(ht18.lm.p)
confint(ht18.lm.p, level = 0.95)
unlink('Dropbox/UCSB/UCSB 2019-2020/SUMMER 2019/PSTAT_126/Homework 5_cache', recursive = TRUE)
library(ggplot2)
ggplot(data = BGSall, aes(HT18, HT9, group = Sex)) + geom_point(aes(col = factor(Sex))) + geom_smooth(method = "lm", se = F, fill = NA) + scale_color_discrete(name = "Sex", labels = c("Males","Females"))
data("infmort")
infmort.full.lm <- with(infmort, lm(log(mortality)~log(income) + region + region*log(income)))
summary(infmort.full.lm)
infmort.full.lm <- with(infmort, lm(log(mortality)~log(income) + region + region*log(income)))
summary(infmort.full.lm)
data("infmort")
infmort.full.lm <- lm(log(infmort$mortality)~log(infmort$income) + infmort$region + infmort$region*log(infmort$income))
summary(infmort.full.lm)
library(faraway)
infmort.full.lm <- lm(log(infmort$mortality)~log(infmort$income) + infmort$region + infmort$region*log(infmort$income))
summary(infmort.full.lm)
plot(final.model, which = c(1,2,3))
table(distance)
View(cab.ts.dataset)
menu <- read.csv("~/Dropbox/linear_reg_proj/menu.csv")
View(menu)
library(ggplot2)
library(ggcorrplot)
library(dplyr)
attach(menu)
full.model <- lm(Calories ~ Category + Total.Fat + Saturated.Fat + Trans.Fat + Cholesterol + Sodium + Carbohydrates + Dietary.Fiber + Sugars + Protein + Vitamin.A....Daily.Value. + Vitamin.C....Daily.Value.)
full.model <- lm(Calories ~ Category + Total.Fat + Saturated.Fat + Trans.Fat + Cholesterol + Sodium + Carbohydrates + Dietary.Fiber + Sugars + Protein + Vitamin.A....Daily.Value. + Vitamin.C....Daily.Value.)
summary(full.model)
plot(full.model, which = c(1,2,3))
full.model <- lm(Calories ~ Category + Total.Fat + Saturated.Fat + Trans.Fat + Cholesterol + Sodium + Carbohydrates + Dietary.Fiber + Sugars + Protein + Vitamin.A....Daily.Value. + Vitamin.C....Daily.Value. + Dietary.Fiber)
summary(full.model)
plot(full.model, which = c(1,2,3))
ggplot(menu, aes(Category,Calories)) + geom_boxplot()
ggplot(menu, aes(Category,Calories)) + geom_boxplot() + theme(axis.text.x = element_text(angle=65, vjust=0.6))
# Correlation matrix
corr <- round(cor(menu), 1)
# Correlation matrix
menu.numeric <- dplyr::select_if(menu, is.numeric)
corr <- round(cor(menu.numeric), 1)
# Plot
ggcorrplot(corr, hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
method="circle",
colors = c("tomato2", "white", "springgreen3"),
title="Correlogram of mtcars",
ggtheme=theme_bw)
full.model <- lm(Calories ~ ., data = menu)
summary(full.model)
menu.data <- subset(menu, drop = c(Item, Serving.Size))
menu.data <- subset(menu, select = -c(Item, Serving.Size))
full.model <- lm(Calories ~ ., data = menu.data)
summary(full.model)
plot(full.model, which = c(1,2,3))
library(MASS)
stepAIC(full.model, data = menu.data)
full.model <- lm(Calories ~ . + Category*., data = menu.data)
summary(full.model)
stepAIC(full.model, data = menu.data)
step <- stepAIC(full.model, data = menu.data)
summary(step)
summary(step)
Concrete_Data_Yeh <- read.csv("~/Dropbox/linear_reg_proj/input_data/Concrete_Data_Yeh.csv")
View(Concrete_Data_Yeh)
attach(Concrete_Data_Yeh)
full.model <- lm(csMPa ~ ., data = Concrete_Data_Yeh)
summary(full.model)
plot(full.model, which = c(1:3))
pwr.transform <- powerTransform(cbind(cement + slag + flyash + water + superplasticizer + coarseaggregate + fineaggregate + age) ~ 1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement, slag, flyash, water, superplasticizer, coarseaggregate, fineaggregate, age) ~ 1, Concrete_Data_Yeh)
View(Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement, slag) ~ 1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(slag,flyash) ~ 1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(water) ~ 1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(water, flyash) ~ 1, Concrete_Data_Yeh)
summary(pwr.transform)
Concrete_Data_Yeh[Concrete_Data_Yeh < 0] <- NA
rowMeans(Concrete_Data_Yeh, na.rm=TRUE)
pwr.transform <- powerTransform(cbind(cement,water) ~ 1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement, slag, flyash, water, superplasticizer, coarseaggregate, fineaggregate,age) ~ 1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement, slag, flyash, water) ~ 1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement, slag) ~ 1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement) ~ 1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement,superplasticizer, coarseaggregate, fineaggregate,age) ~ 1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement,flyash) ~ 1, Concrete_Data_Yeh)
Concrete_Data_Yeh[Concrete_Data_Yeh < 0] <- NA
pwr.transform <- powerTransform(c(cement,slag) ~ 1, Concrete_Data_Yeh)
full.model <- lm(csMPa ~ ., data = Concrete_Data_Yeh)
pwr.transform <- powerTransform(full.model, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement), Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement), Concrete_Data_Yeh)
pwr.transform <- powerTransform(full.model ~1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement) ~1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement, flyash) ~1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement, water) ~1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement, water, superplasticizer) ~1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement, water, coarseaggregate) ~1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement, water, coarseaggregate, fineaggregate) ~1, Concrete_Data_Yeh)
pwr.transform <- powerTransform(cbind(cement, water, coarseaggregate, fineaggregate, age) ~1, Concrete_Data_Yeh)
summary(pwr.transform)
testTransform(pwr.transform,lambda =c(0.33,1,1,1,1))
concrete.transform <- with(Concrete_Data_Yeh, data.frame(I(cement^(0.33),select(-c(cement))))
concrete.transform <- data.frame(cement^0.33,subset(Concrete_Data_Yeh, select = -c(cement)))
summary(lm(cement.0.33 ~ ., data = concrete.transform))
summary(lm(csMPa ~ ., data = concrete.transform))
summary(full.model)
full.model <- lm(csMPa ~ ., data = Concrete_Data_Yeh)
summary(full.model)
concrete.transform <- data.frame(cement^0.33,subset(Concrete_Data_Yeh, select = -c(cement)))
summary(lm(csMPa ~ ., data = concrete.transform))
boxCox(full.model)
csmpa.pt =powerTransform(csMPa~., Concrete_Data_Yeh)
summary(csmpa.pt)
stepAIC(full.model)
av.plots(full.model)
avPlots(full.model)
cab.type.bplot + geom_boxplot(aes(fill=factor(cab_type))) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box Plot of Uber-Lyft Price Parity",
subtitle="Price Grouped by Cab Type",
caption="Source: kaggle.com/ravi72munde/uber-lyft-cab-prices",
x="Cab_Type",
y="Price (USD)")
#--------------
price.neighborhood.plot <- ggplot(cab.dataset, aes(source,price))
price.neighborhood.plot + geom_boxplot() +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Box Plot of Uber-Lyft Service Price and Source",
subtitle="Price Grouped by Source",
caption="Source: kaggle.com/ravi72munde/uber-lyft-cab-prices",
x="Source/Neighborhood",
y="Price (USD)")
luxury.source.plot <- ggplot(cab.dataset, aes(source))
luxury.source.plot + geom_bar(aes(fill = name), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
luxury.price.bysource.plot <- ggplot(cab.dataset.luxury, aes(source,price))
luxury.price.bysource.plot + geom_boxplot() + theme(axis.text.x = element_text(angle=65, vjust=0.6))
final.model <- lm(price ~distance + surge_multiplier + source + destination + name + distance*source + distance*destination + distance*name + surge_multiplier*source + surge_multiplier*destination + surge_multiplier*name)
predict.lm(final.model, newdata = data.frame(distance = 7.134, name = 'UberPool', surge_multiplier =  1.4, source = 'North End', destination = 'North Station'), interval = 'confidence')
summary(reduced.model)
summary(final.model)
plot(final.model, which = c(1,2,3))
num.model <- lm(price~distance + surge_multiplier)
anova(null.lm,categorical.model)
anova(num.model, asparallel.model)
anova(categorical.model, asparallel.model)
cab.pt =powerTransform(cbind(price, surge_multiplier)~1, cab.dataset)
summary(cab.pt)
cab.pt =powerTransform(cbind(distance,surge_multiplier)~1, cab.dataset)
summary(cab.pt)
testTransform(cab.pt,lambda =c(1,1))
testTransform(cab.pt,lambda =c(1,0))
boxCox(lm(price~.,data =cab.dataset))
anova(asparallel.model,nonparallel.model)
summary(final.model)
sink("lm.txt")
print(summary(final.model))
sink()
stepAIC(m0, scope.model, k = log(length(cab.dataset)), direction="both")
plot(final.model, which = c(1,2,3))
setwd("~/Documents/OpioidTwitter")
stemmed_words <- read.csv('./data/stemmed_data.csv')
View(stemmed_words)
install.packages("BTM")
install.packages(c("backports", "boot", "callr", "car", "carData", "classInt", "curl", "data.table", "DescTools", "digest", "DT", "effects", "ellipsis", "foreign", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "KernSmooth", "knitr", "later", "leaflet", "maptools", "memisc", "mgcv", "nlme", "openxlsx", "pkgconfig", "plotly", "promises", "purrr", "quantreg", "R6", "raster", "Rcpp", "RcppEigen", "rgdal", "rgeos", "rlang", "rmarkdown", "rvest", "scales", "selectr", "sf", "shiny", "slam", "sp", "survival", "sys", "tabplot", "tidyr", "tidyverse", "tinytex", "tmap", "units", "webshot", "xfun", "zip"))
